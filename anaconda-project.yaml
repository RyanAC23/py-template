# This is an Anaconda project file.
#
# Here you can describe your project and how to run it.
# Use `anaconda-project run` to run the project.
# The file is in YAML format, please see http://www.yaml.org/start.html for more.
#

#
# Set the 'name' key to name your project
#
name: py-template

#
# Set the 'icon' key to give your project an icon
#
icon:

#
# Set a one-sentence-or-so 'description' key with project details
#
description: Sample Python project for personal use.

#
# In the commands section, list your runnable scripts, notebooks, and other code.
# Use `anaconda-project add-command` to add commands.
#
commands:
  shell:
    unix: bash --init-file /dev/null  # Suppress startup files which might activate another env
    env_spec: py-template

  export:
    unix: conda env export
    env_spec: py-template

  # Needs to be explicitly called until we can run scripts on prepare
  # https://github.com/Anaconda-Platform/anaconda-project/issues/239
  init:
    unix: python3 -m ipykernel install --user --name "py-template" --display-name "Python
      3 (py-template)"
    env_spec: py-template

  clean:
    unix: jupyter kernelspec uninstall -f "py-template"
    env_spec: py-template

#
# In the variables section, list any environment variables your code depends on.
# Use `anaconda-project add-variable` to add variables.
#
variables:
  CONDA_EXE: mamba

#
# In the services section, list any services that should be
# available before your code runs.
# Use `anaconda-project add-service` to add services.
#
services: {}

#
# In the downloads section, list any URLs to download to local files
# before your code runs.
# Use `anaconda-project add-download` to add downloads.
#
downloads: {}

#
# In the packages section, list any packages that must be installed
# before your code runs.
# Use `anaconda-project add-packages` to add packages.
#
# Trick: Call this "dependencies:" so this file can be used as an environment.yaml file:
#
#     conda env --file anaconda-project.yaml
#
# Requires anaconda-project >= 0.8.4
#
# See https://github.com/Anaconda-Platform/anaconda-project/issues/265

# packages:
dependencies:
- python=3.9
- anaconda-project>=0.10.1

  # To deal with error in XXXX setup command: use_2to3 is invalid when false
  # https://github.com/pypa/setuptools/issues/2775
- setuptools<58.0.2|>59

  # Core
- scipy
- sympy
- pyfftw
- pandas
- numexpr

  # Optimization

  # Plotting and visualization tools
- matplotlib

  # Testing
- pytest-cov
- pytest-flake8
- pytest-html
- pytest-xdist
- black

  # Documentation
- jupytext
- conda-forge::uncertainties
- conda-forge::jupyter_nbextensions_configurator
- sphinx
- conda-forge::myst-nb
- conda-forge::sphinx-panels
- conda-forge::sphinx-book-theme
- conda-forge::sphinx-autobuild

  # Pip-only dependencies
- pip
- pip:
  - sphinxcontrib-zopeext
  - sphinxcontrib-bibtex
  - mmf-setup

channels:
- defaults

#
# In the platforms section, list platforms the project should work on
# Examples: "linux-64", "osx-64", "win-64"
# Use `anaconda-project add-platforms` to add platforms.
#
platforms:
- linux-64
- osx-64
- win-64

#
# You can define multiple, named environment specs.
# Each inherits any global packages or channels,
# but can have its own unique ones also.
# Use `anaconda-project add-env-spec` to add environment specs.
#
env_specs:
  py-template:
    description: sample python project
    channels: []

# Silence warnings about about notebooks without run commands
# See https://github.com/Anaconda-Platform/anaconda-project/issues/263#issuecomment-870004641
skip_imports:
  notebooks: true
